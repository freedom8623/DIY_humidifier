C51 COMPILER V9.60.7.0   MENU                                                              12/14/2023 16:02:20 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MENU
OBJECT MODULE PLACED IN .\Objects\Menu.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Driver\Menu.c LARGE WARNINGLEVEL(1) OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Dr
                    -iver;.\User) DEBUG OBJECTEXTEND PRINT(.\Listings\Menu.lst) TABS(2) OBJECT(.\Objects\Menu.obj)

line level    source

   1          #include "Menu.h"
   2          #include "interrupt.h"
   3          #include "pwm.h"
   4          //∞¥º¸
   5          struct keys key[];
   6          //’ºø’±»
   7          unsigned int PWM1_Duty1;
   8          
   9          void (*current_operation_index)(); //≤Ÿ◊˜∫Ø ˝÷∏’Î
  10          unsigned int  func_index = 0;//ªÒ»°À˜“˝÷µ
  11          unsigned int Water_Flag;
  12          
  13          //Œ¬∂»
  14          unsigned char rec_dat[9] = {'0','0','0','0','0','0','0','0','0'}; //¥¢¥Ê ˝æ›
  15          //=====================================
  16          int limit_humit = 100;
  17          char light_mode =0;
  18          extern unsigned char new_light_mode;
  19          extern unsigned int new_limit_humit;
  20          
  21          int setting_duty =1;
  22          //========≤Àµ•========================
  23          uchar showtext[16];
  24          uchar showtext2[16];
  25          //currentÀ˜“˝  enter»∑∂® ≥§∞¥Ω¯»Î≤Àµ• nextœ¬“ª∏ˆ +   last…œ“ª∏ˆ -  back∑µªÿ ≥§∞¥πÿ±’≈ÁŒÌ
  26          
  27          Menu_table  table[29]=
  28          {
  29          ////“ªº∂
  30          //{0, 1, 0, 0,  0,(*Page0)},//  Ω¯»Î“ªº∂≤Àµ•
  31          
  32          //{1, 3, 2, 2,  0,(*Page1)},//“ªº∂ΩÁ√Ê£®…Ë÷√£©£∫“ªº∂ΩÁ√Ê—°‘Òµ⁄“ª––
  33          //{2, 4, 1, 1,  0,(*Page2)},//“ªº∂ΩÁ√Ê—°‘Òµ⁄∂˛––
  34          
  35          //{3, 5, 3, 3,  1,(*Page3)},//∂˛º∂ΩÁ√Ê
  36          //{4, 6, 4, 4,  2,(*Page4)},//∂˛º∂ΩÁ√Ê
  37          
  38          //{5, 0, 3, 3,  3,(*Page5)},//≥…π¶œ‘ æ
  39          //{6, 0, 4, 4,  4,(*Page6)},//≥…π¶œ‘ æ
  40          
  41            //“ªº∂
  42            {0, 0, 0, 0,  1,(*Page0)},//  Ω¯»Î“ªº∂≤Àµ•
  43            
  44            {1, 0, 2, 2,  3,(*Page1)},//“ªº∂ΩÁ√Ê£®…Ë÷√£©£∫“ªº∂ΩÁ√Ê—°‘Òµ⁄“ª––
  45            {2, 0, 1, 1,  4,(*Page2)},//“ªº∂ΩÁ√Ê—°‘Òµ⁄∂˛––
  46            
  47            {3, 1, 3, 3,  5,(*Page3)},//∂˛º∂ΩÁ√Ê
  48            {4, 2, 4, 4,  6,(*Page4)},//∂˛º∂ΩÁ√Ê
  49            
  50            {5, 3, 3, 3,  0,(*Page5)},//≥…π¶œ‘ æ
  51            {6, 4, 4, 4,  0,(*Page6)},//≥…π¶œ‘ æ
  52            
  53          };
  54          
C51 COMPILER V9.60.7.0   MENU                                                              12/14/2023 16:02:20 PAGE 2   

  55          void Page0(void)
  56          {
  57   1          OLED_ShowString(0,0,"=======0^0======",16);  /*µ⁄“ª∏ˆ≤Œ ˝ «Xøÿ÷∆◊Û”“Œª÷√…Ë÷√Œ™8/Œª£¨µ⁄∂˛∏ˆ≤Œ ˝ «Y…œœ¬2/Œ
             -ª*/
  58   1          OLED_ShowString(0,2,"||",16);OLED_ShowString(112,2,"||",16);
  59   1          OLED_ShowString(0,2,"||",16);OLED_ShowString(112,2,"||",16);
  60   1          OLED_ShowString(0,4,"||",16);OLED_ShowString(112,4,"||",16);
  61   1          OLED_ShowString(0,4,"||",16);OLED_ShowString(112,4,"||",16);
  62   1          OLED_ShowString(0,6,"||",16);OLED_ShowString(112,6,"||",16);
  63   1          OLED_ShowString(0,6,"||",16);OLED_ShowString(112,6,"||",16);
  64   1        
  65   1        
  66   1          OLED_ShowChinese(32,2,4,16);/* ™∂»*/
  67   1          OLED_ShowChinese(48,2,5,16);
  68   1          sprintf(showtext,":%c%c%",rec_dat[0],rec_dat[1]);
  69   1          OLED_ShowString(64,2,showtext,16);
  70   1          
  71   1          OLED_ShowChinese(32,4,8,16);/*ÀÆŒª*/
  72   1          OLED_ShowChinese(48,4,9,16);
  73   1          OLED_ShowString(64,4,":",16);
  74   1          if(Water_Flag == 1){
  75   2            
  76   2            OLED_ShowChinese(80,4,13,16);/*°¡*/
  77   2          }
  78   1          if(Water_Flag == 0){
  79   2            
  80   2            OLED_ShowChinese(80,4,12,16);/*°Ã*/
  81   2          }
  82   1        
  83   1          OLED_ShowChinese(32,6,10,16);/*ŒÌªØ*/
  84   1          OLED_ShowChinese(48,6,11,16);
  85   1          OLED_ShowString(64,6,":",16);
  86   1          
  87   1          if(setting_duty == 1){
  88   2            
  89   2            OLED_ShowChinese(80,6,12,16);/*°Ã*/
  90   2          }
  91   1          if(setting_duty == 0){
  92   2            
  93   2            OLED_ShowChinese(80,6,13,16);/*°¡*/
  94   2          }
  95   1      
  96   1      }
  97          
  98          void Page1(void)
  99          {
 100   1          OLED_ShowChinese(48,0,6,16); /*…Ë÷√*/
 101   1          OLED_ShowChinese(64,0,7,16); /*…Ë÷√*/
 102   1          OLED_ShowString(0,0,"======",16);OLED_ShowString(80,0,"=====",16);
 103   1        
 104   1          OLED_ShowString(0,2,">",16);
 105   1          OLED_ShowChinese(16,2,6,16); /*…Ë÷√*/
 106   1          OLED_ShowChinese(32,2,7,16); 
 107   1          OLED_ShowChinese(48,2,4,16);/* ™∂»*/
 108   1          OLED_ShowChinese(64,2,5,16);
 109   1      
 110   1          
 111   1          OLED_ShowChinese(16,4,6,16); /*…Ë÷√*/
 112   1          OLED_ShowChinese(32,4,7,16); 
 113   1          OLED_ShowChinese(48,4,0,16);/* ™∂»*/
 114   1          OLED_ShowChinese(64,4,1,16);
 115   1        
C51 COMPILER V9.60.7.0   MENU                                                              12/14/2023 16:02:20 PAGE 3   

 116   1      }
 117          
 118          void Page2(void)
 119          {
 120   1          OLED_ShowChinese(48,0,6,16); /*…Ë÷√*/
 121   1          OLED_ShowChinese(64,0,7,16); /*…Ë÷√*/
 122   1          OLED_ShowString(0,0,"======",16);OLED_ShowString(80,0,"=====",16);
 123   1        
 124   1          
 125   1          OLED_ShowChinese(16,2,6,16); /*…Ë÷√*/
 126   1          OLED_ShowChinese(32,2,7,16); 
 127   1          OLED_ShowChinese(48,2,4,16);/* ™∂»*/
 128   1          OLED_ShowChinese(64,2,5,16);
 129   1      
 130   1          OLED_ShowString(0,4,">",16);
 131   1          OLED_ShowChinese(16,4,6,16); /*…Ë÷√*/
 132   1          OLED_ShowChinese(32,4,7,16); 
 133   1          OLED_ShowChinese(48,4,0,16);/*µ∆π‚*/
 134   1          OLED_ShowChinese(64,4,1,16);
 135   1        
 136   1      }
 137          //int setting_humit = 0;
 138          
 139          
 140          void Page3(void)
 141          {
 142   1          OLED_ShowChinese(48,0,6,16); /*…Ë÷√*/
 143   1          OLED_ShowChinese(64,0,7,16); /*…Ë÷√*/
 144   1          OLED_ShowString(0,0,"======",16);OLED_ShowString(80,0,"=====",16);
 145   1        
 146   1          
 147   1          OLED_ShowChinese(16,2,14,16); /*…Ë÷√*/
 148   1          OLED_ShowChinese(32,2,15,16); 
 149   1          OLED_ShowChinese(48,2,4,16);/* ™∂»*/
 150   1          OLED_ShowChinese(64,2,5,16);
 151   1        
 152   1            sprintf(showtext,":%03d%",limit_humit);
 153   1          OLED_ShowString(80,2,showtext,16);
 154   1        
 155   1      
 156   1        
 157   1        
 158   1      }
 159          
 160          void Page4(void)
 161          {
 162   1          OLED_ShowChinese(48,0,6,16); /*…Ë÷√*/
 163   1          OLED_ShowChinese(64,0,7,16); /*…Ë÷√*/
 164   1          OLED_ShowString(0,0,"======",16);OLED_ShowString(80,0,"=====",16);
 165   1        
 166   1          
 167   1          OLED_ShowChinese(16,2,14,16); /*…Ë÷√*/
 168   1          OLED_ShowChinese(32,2,15,16); 
 169   1          OLED_ShowChinese(48,2,0,16);/*≥…π¶*/
 170   1          OLED_ShowChinese(64,2,1,16);
 171   1        
 172   1          sprintf(showtext,":%03c%",light_mode);
 173   1          OLED_ShowString(80,2,showtext,16);
 174   1      
 175   1        
 176   1        
 177   1      }
C51 COMPILER V9.60.7.0   MENU                                                              12/14/2023 16:02:20 PAGE 4   

 178          
 179          
 180          void Page5(void)
 181          {
 182   1          OLED_ShowChinese(48,0,6,16); /*…Ë÷√*/
 183   1          OLED_ShowChinese(64,0,7,16); /*…Ë÷√*/
 184   1          OLED_ShowString(0,0,"======",16);OLED_ShowString(80,0,"=====",16);
 185   1        
 186   1          
 187   1          OLED_ShowChinese(16,4,6,16); /*…Ë÷√*/
 188   1          OLED_ShowChinese(32,4,7,16); 
 189   1          OLED_ShowChinese(48,4,16,16);/*≥…π¶*/
 190   1          OLED_ShowChinese(64,4,17,16);
 191   1      
 192   1          OLED_ShowString(80,4,"^-^",16);
 193   1      
 194   1        
 195   1        
 196   1        
 197   1      }
 198          
 199          
 200          void Page6(void)
 201          {
 202   1          OLED_ShowChinese(48,0,6,16); /*…Ë÷√*/
 203   1          OLED_ShowChinese(64,0,7,16); /*…Ë÷√*/
 204   1          OLED_ShowString(0,0,"======",16);OLED_ShowString(80,0,"=====",16);
 205   1        
 206   1          
 207   1          OLED_ShowChinese(16,4,6,16); /*…Ë÷√*/
 208   1          OLED_ShowChinese(32,4,7,16); 
 209   1          OLED_ShowChinese(48,4,16,16);/*≥…π¶*/
 210   1          OLED_ShowChinese(64,4,17,16);
 211   1        
 212   1          
 213   1          OLED_ShowString(80,4,"^-^",16);
 214   1      
 215   1        
 216   1        
 217   1      }
 218          
 219          
 220          
 221          //∞¥º¸¥¶¿Ì
 222          void Key_Proc(void)
 223          {
 224   1          if(key[0].single_flag == 1)//∞¥º¸SW1 ∂Ã∞¥
 225   1        { 
 226   2          func_index=table[func_index].enter;//ªÒ»°enterÀ˜“˝∫≈
 227   2          OLED_Clear();
 228   2          key[0].single_flag = 0;
 229   2        }
 230   1      
 231   1      //==============================================      
 232   1         if(key[1].single_flag == 1)//œÚ…œ
 233   1        {
 234   2            func_index=table[func_index].next;//ªÒ»°nextÀ˜“˝∫≈
 235   2            if(func_index == 3)
 236   2            {
 237   3              limit_humit++;
 238   3            }
 239   2            if(func_index == 4)
C51 COMPILER V9.60.7.0   MENU                                                              12/14/2023 16:02:20 PAGE 5   

 240   2            {
 241   3              light_mode++;
 242   3            }
 243   2           
 244   2            new_light_mode = light_mode;
 245   2            OLED_Clear();
 246   2            
 247   2            key[1].single_flag = 0;
 248   2        
 249   2        }
 250   1      //==============================================  
 251   1         if(key[2].single_flag == 1)//œÚœ¬
 252   1         {
 253   2          func_index=table[func_index].last;//ªÒ»°lastÀ˜“˝∫≈
 254   2            if(func_index == 3)
 255   2            {
 256   3              limit_humit--;
 257   3            }
 258   2            if(func_index == 4)
 259   2            {
 260   3              light_mode =0;
 261   3              light_mode--;
 262   3            }
 263   2           
 264   2          OLED_Clear();
 265   2          key[2].single_flag = 0;
 266   2        
 267   2        }
 268   1      //==============================================    
 269   1        if(key[3].single_flag == 1)//πÿ±’
 270   1        {
 271   2          func_index=table[func_index].back;//ªÒ»°lastÀ˜“˝∫≈
 272   2          OLED_Clear();
 273   2          
 274   2          key[3].single_flag = 0;
 275   2        
 276   2        }
 277   1       
 278   1          if(key[3].longkey_flag == 1)//≥§∞¥πÿ±’ŒÌªØ∆˜;
 279   1        {
 280   2            if(func_index==0)//ªÒ»°lastÀ˜“˝∫≈
 281   2        {
 282   3              setting_duty ^= 1;
 283   3            
 284   3              if(setting_duty == 0)
 285   3              {
 286   4              
 287   4              PWMA_CCR1H = (u8)(PWM1_off >> 8); //…Ë÷√’ºø’±» ±º‰
 288   4              PWMA_CCR1L = (u8)(PWM1_off);
 289   4              
 290   4              }
 291   3              if(setting_duty == 1 )
 292   3              {
 293   4              PWMA_CCR1H = (u8)(PWM1_on >> 8); //…Ë÷√’ºø’±» ±º‰
 294   4              PWMA_CCR1L = (u8)(PWM1_on);
 295   4              }
 296   3              key[3].longkey_flag = 0;
 297   3          }
 298   2        }
 299   1        current_operation_index=table[func_index].current_operation;//÷¥––µ±«∞À˜“˝∫≈À˘∂‘”¶µƒπ¶ƒ‹∫Ø ˝°£
 300   1        (*current_operation_index)();
 301   1      }
C51 COMPILER V9.60.7.0   MENU                                                              12/14/2023 16:02:20 PAGE 6   

 302          
 303          
 304          
 305          
 306          
 307          
 308          
 309          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1995    ----
   CONSTANT SIZE    =     62    ----
   XDATA SIZE       =    287    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
